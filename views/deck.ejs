<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title><%= query.dataValues.deck_name %></title>

    <link rel="stylesheet" href ="/css/bootstrap.min.css">

    <style>
        .tooltip-inner{
            text-align: left;
            white-space: pre-line;
        }
    </style>
</head>
<body>
    <div class="bg-dark pb-4 text-white">
        <%- include('partials/navbar.ejs') %>
        <%- include('partials/imports.ejs') %>

        <% if (messages.error) { %>
            <div class="text-danger">
                <%= messages.error %>
            </div>
        <% } %>

        <% if (messages.success) { %>
            <div class="text-success">
                <%= messages.success %>
            </div>
        <% } %>


        <%
        // For card name error handling
        function getStatsFromCard(card_name, card_set) {
            var card_stats = card_info['scoring_dict'][card_set][card_name]
            if (card_stats) {
                return card_stats
            }
            else {
                var tokens = card_name.split(" ")
                var first_word = tokens[0]
                var card_stats_ouptut = null

                if (first_word == "It's") {
                    card_stats_ouptut = card_info['scoring_dict']["MM"]["It's Coming"]
                }

                // MM Velum/Hyde (WC is covered in document)
                else if (first_word == "Hyde" || first_word == "Velum") {
                    card_stats_ouptut = card_info['scoring_dict']["MM"]["Hyde/Velum"]
                }
                
                // TT for non-COTA sets
                else if (first_word == "Timetraveller") {
                    card_stats_ouptut = card_info['scoring_dict']["COTA"]["Timetraveller"]
                }

                // HFFS for non-COTA sets
                else if (first_word == "Help") {
                    card_stats_ouptut = card_info['scoring_dict']["COTA"]["Help From Future Self"]
                }

                // Hings/Gross from non-DT sets
                else if (first_word == "Com.") {
                    if (tokens[2] == "Hings") {
                        card_stats_ouptut = card_info['scoring_dict']["DT"]["Com. Officer Hings"]
                    }
                    else if (tokens[2] == "Gross") {
                        card_stats_ouptut = card_info['scoring_dict']["DT"]["Com. Officer Gross"]
                    }
                }
                
                // Z-Force from non-DT sets
                else if (first_word[0] == "Z") {
                    if (tokens[1] == "Agent") {
                        card_stats_ouptut = card_info['scoring_dict']["MM"]["Z-Force Agent 14"]
                    }
                    else if (tokens[1] == "Tracker") {
                        card_stats_ouptut = card_info['scoring_dict']["MM"]["Z-Particle Tracker"]
                    }
                    else if (tokens[1] == "Blaster") {
                        card_stats_ouptut = card_info['scoring_dict']["MM"]["Z-Ray Blaster"]
                    }
                    else if (tokens[1] == "Emitter") {
                        card_stats_ouptut = card_info['scoring_dict']["MM"]["Z-Wave Emitter"]
                    }
                }
                
                // Dexus from non-WC decks
                else if (first_word == "Dexus") {
                    card_stats_ouptut = card_info['scoring_dict']["WC"]["Dexus"]
                }

                // Toad from non-WC decks
                else if (first_word == "Toad") {
                    card_stats_ouptut = card_info['scoring_dict']["WC"]["Toad"]
                }

                // Scylla from non-MM decks
                else if (first_word == "Scylla") {
                    card_stats_ouptut = card_info['scoring_dict']["MM"]["Scylla"]
                }

                // Charybdis from non-MM decks
                else if (first_word == "Charybdis") {
                    card_stats_ouptut = card_info['scoring_dict']["MM"]["Charybdis"]
                }

                // Gigantic creatures
                // Ultra Gravitron
                else if (first_word == "Ultra") {
                    card_stats_ouptut = card_info['scoring_dict']["MM"]["Ultra Big Set"]
                }

                // Niffle Kong
                else if (first_word == "Niffle") {
                    card_stats_ouptut = card_info['scoring_dict']["MM"]["Kong Big Set"]
                }

                // Deusillus
                else if (first_word == "Deusillus") {
                    card_stats_ouptut = card_info['scoring_dict']["MM"]["Deus Big Set"]
                }
                    
                // WC Mega Brobnar creatures
                else if (first_word == "Mega") {
                    card_stats_ouptut = card_info['scoring_dict']["WC"][card_name.slice(5)]
                }

                // Shiz Buggies, removes single quotes
                else if (first_word.slice(0, 3) == "Shi") {
                    card_stats_ouptut = card_info['scoring_dict']["WOE"][card_name]
                }

                // Dive Deep
                else if (first_word == "Dive") {
                    card_stats_ouptut = card_info['scoring_dict']["DT"]["Dive Deep"]
                }

                // Drawn Down
                else if (first_word == "Drawn") {
                    card_stats_ouptut = card_info['scoring_dict']["DT"]["Drawn Down"]
                }

                // Dark Discovery
                else if (first_word == "Dark") {
                    card_stats_ouptut = card_info['scoring_dict']["DT"]["Dark Discovery"]
                }

                // Ortannu the Chained
                else if (first_word == "Ortannu") {
                    card_stats_ouptut = card_info['scoring_dict']["AOA"]["Ortannu the Chained"]
                }
                
                // Ortannu's Binding
                else if (first_word == "Ortannu's") {
                    card_stats_ouptut = card_info['scoring_dict']["AOA"]["Ortannu's Binding"]
                }

                else if (first_word == "Monument") {
                    card_stats_ouptut = card_info['scoring_dict']["MM"][card_name]
                }


                // Handle anomaly cards
                else if (first_word == "Ghostform") {
                    card_stats_ouptut = card_info['scoring_dict']["WC"]["Ghostform"]
                } 

                else if (first_word == "Infomancer") {
                    card_stats_ouptut = card_info['scoring_dict']["WC"]["Infomancer"]
                }

                else if (first_word == "Lateral") {
                    card_stats_ouptut = card_info['scoring_dict']["WC"]["Lateral Shift"]
                }

                else if (first_word == "Memolith") {
                    card_stats_ouptut = card_info['scoring_dict']["WC"]["Memolith"]
                }

                else if (first_word == "Nizak,") {
                    card_stats_ouptut = card_info['scoring_dict']["WC"]["Nizak, The Forgotten"]
                }

                else if (first_word == "The") {
                    if (tokens[1] == "Grim") {
                        card_stats_ouptut = card_info['scoring_dict']["WC"]["The Grim Reaper"]
                    }
                    else if (tokens[1] == "Red") {
                        card_stats_ouptut = card_info['scoring_dict']["WC"]["The Red Baron"]
                    }
                }

                else if (first_word == "Timequake") {
                    card_stats_ouptut = card_info['scoring_dict']["WC"]["Timequake"]
                }

                else if (first_word == "Near-Future") {
                    card_stats_ouptut = card_info['scoring_dict']["WOE"]["Near-Future Lens"]
                }

                else if (first_word == "Curse") {
                    card_stats_ouptut = card_info['scoring_dict']["WOE"]["Curse of Forgetfulness"]
                }
                // anomalies finished

                // World's Collide variants
                // Brobnar brews
                else if (tokens.length > 1) {
                    if (tokens[1] == "Brew") {
                        card_stats_ouptut = card_info['scoring_dict']["WC"]["Brew"]
                    }

                    // Dis banes
                    else if (tokens[1] == "Bane") {
                        card_stats_ouptut = card_info['scoring_dict']["WC"]["Bane"]
                    }
                }

                if (!card_stats_ouptut) {
                    // add console message error adding card
                    console.log('Error adding card: ' + card_name)
                }
                return card_stats_ouptut
            }
        }









        

        // Handle ordering the pods
        query.dataValues.Pods.sort(function(a, b){return a.house_id - b.house_id})

        // Create temp enhancement dict of lists for referencing enhancements from cards
        var enhancements = {}

        // Populate enhancement dict
        for (i=1; i < 4; i++) {
            if (query.dataValues.Pods[i].enhancements) {
                for (j=0; j < query.dataValues.Pods[i].enhancements.length; j++) {
                    var card_number = query.dataValues.Pods[i].enhancements[j][0].toString()
                    var card_enhancements = query.dataValues.Pods[i].enhancements[j][1]

                    try {
                        enhancements[card_number].push(card_enhancements) 
                    }
                    catch {
                        enhancements[card_number] = [card_enhancements]
                    }
                }
            }
        }

        // Create temp dict of card duplicates (for displaying proper score within tooltip)
        // This dict is updated as cards are displayed, not before
        var duplicates = {}


        // Generates the tooltip for a card
        getCardTooltip = function(card, card_proper_name) {
            var outstring = ''

            // If card is an anomaly, shorter card ID, else longer card ID
            // This ensures the correct set is identified
            var card_set_number = parseInt(card.card_id) < 0 ? card.card_id.toString().slice(0, -2).replace('-', '') : card.card_id.toString().slice(0, -3)
            
            // Retrieve the card name and score
            try {
                var card_set = card_info['card_setnum_to_abbrev'][card_set_number]
                var card_scoring_name = card_info['card_id_to_name'][card.card_id]
                var card_stats = getStatsFromCard(card_scoring_name, card_set)
                var raw_score = parseInt(card_stats['score'])
                // try retrieveing duplicate value
                duplicates[card.card_id] += 1

                if (duplicates[card.card_id]) {
                    var card_score = raw_score + parseInt(card_stats['multiples'][(duplicates[card.card_id] - 1) < 4 ? (duplicates[card.card_id] - 1): 4])
                }
                else {
                    // This is the first instance of the card in the dict, value is base
                    duplicates[card.card_id] = 1
                
                    var card_score = raw_score
                }
            }
            catch(e) {
                console.log(e)
                console.log('Error displaying card ' + card.card_id + ':' + card.card_name)
            }



            // Map the multiples array to the actual score of the card when of that value
            var multiples = card.Multiple.dataValues.multiples.map(multiples => multiples + raw_score)


            // Form the output
            outstring += card_proper_name.replace(/"/, '&quot;').replace(/"/, '&quot;') + '\n'
            outstring += 'Score: ' + card_score + '\n'
            outstring += 'Multiples: ' + multiples

            return outstring;
        }

        getCardDisplay = function(pod, cardPodNum) {
            var outstring = ''
            var card = query.dataValues.Pods[pod]["card_" + cardPodNum]
            var card_number = card.card_id.toString()
            var card_proper_name = card_info['card_id_to_name'][card_number]
            outstring += '<td data-bs-toggle="tooltip" data-bs-placement="top" data-bs-delay=\'{"show":250, "hide":100}\' data-bs-title="'
            outstring+= getCardTooltip(query.dataValues.Pods[pod]["card_" + cardPodNum], card_proper_name) + '">'
            outstring += card_proper_name

            // If a card has enhancements, pop the list of enhancements and add to card
            if (enhancements[card_number]) {
                var pips = enhancements[card_number].pop()
                for (i=0; i < pips.length; i++) {
                    outstring += '<img class="ms-1" src="/rsrc/pip_' + pips[i] + '.png" width="18px" height="18px">'
                }

                // If a card has an empty list left, remove from dict
                if (enhancements[card_number].length == 0) {
                    delete enhancements[card_number];
                }
            }
            
            outstring += '</td>'
            return outstring
        }
        %>



        <div class="bg-dark px-2 text-white">
            <h1><img src=<%= "/rsrc/set_" + query.dataValues.set_id + ".png" %> width="36px" height="36px" />  <%= query.dataValues.deck_name %></h1>

            <table data-bs-theme="dark">
                <% // Check if user is logged in %>
                <% if (isLoggedIn) { %>
                    <% // Mine/Not Mine deck buttons, display if user is patreon or admin %>
                    <% if (user.patreon_rank > 1 || user.is_admin || user.unlimited_user) { %>
                        <tr>
                            <td>
                                <% if (isInCollection) { %>
                                    <form action=<%= "/deck/" + query.dataValues.deck_code + "/notmine" %> method="POST">
                                        <button class="py-1 mx-3 btn btn-outline-light" type="submit">Not Mine</button>
                                    </form>
                                <% } else { %>
                                    <form action=<%= "/deck/" + query.dataValues.deck_code + "/mine" %> method="POST">
                                        <button class="py-1 mx-3 btn btn-outline-light" type="submit">Mine</button>
                                    </form>
                                <% } %>
                            </td>
                        </tr>
                    <% } %>
                    <tr>
                        <% // If deck has no alpha displays requests and button %>
                        <% if (query.dataValues.alpha_score == null) { %>
                            <% // Request alpha score button %>
                            <% if (isInCollection) { %>
                                <% if (user.alpha_requests > 0) { %>
                                    <td>
                                        <form class="pt-3 pb-2" action=<%= "/deck/" + query.dataValues.deck_code + "/alpha" %> method="POST">
                                            <button class="py-1 mx-3 btn btn-outline-warning" type="submit">Request Alpha Score</button>
                                        </form>
                                    </td>
                                <% } %>
                            <% } %>
                        <!--If alpha is pending, say is pending-->
                        <% } else if (query.dataValues.alpha_score == "P" || query.dataValues.alpha_score[0] == "R") { %>
                            <td class="py-2">Alpha score is pending...</td>
                        <% } %>
                    </tr>
                <% } %>

                <% if (query.dataValues.alpha_score != null && query.dataValues.alpha_score != "P" && query.dataValues.alpha_score[0] != "R") { %>
                    <% // Rescore alpha button %>
                    <% if (isLoggedIn && isInCollection) { %>
                        <% if (user.alpha_requests > 0) { %>
                            <tr>
                                <td>
                                    <form class="pt-3 pb-2" action=<%= "/deck/" + query.dataValues.deck_code + "/alpharescore" %> method="POST">
                                        <button class="py-1 mx-3 btn btn-outline-warning" type="submit">Request Alpha Re-Score</button>
                                    </form>
                                </td>
                            </tr>
                        <% } %>
                    <% } %>

                    <td class="py-2 ">Alpha Score: <%= query.dataValues.alpha_score %></td>
                <% } %>

                <% if (query.Token) { %>
                    <% // if the deck has a token, display token %>
                    <div class="py-1">Token:  <%= query.Token.Card.card_name %></div>
                <% } %>
            </table>

            <table class="table table-striped" data-bs-theme="dark">
                <tr>
                    <th></th>
                    <th><img src=<%= "/rsrc/house_" + query.dataValues.house1 + ".png" %> width="40" height="40" /></th>
                    <th><img src=<%= "/rsrc/house_" + query.dataValues.house2 + ".png" %> width="40" height="40" /></th>
                    <th><img src=<%= "/rsrc/house_" + query.dataValues.house3 + ".png" %> width="40" height="40" /></th>
                    <th></th>
                    <th></th>
                </tr>
                <tr>
                    <th></th>
                    <th><%= query.dataValues.house_1.house_name %></th>
                    <th><%= query.dataValues.house_2.house_name %></th>
                    <th><%= query.dataValues.house_3.house_name %></th>
                    <th></th>
                    <th>Score</th>
                </tr>

                <tr>
                    <td></td>
                    <%- getCardDisplay(1, 1) %>
                    <%- getCardDisplay(2, 1) %>
                    <%- getCardDisplay(3, 1) %>
                    <td></td>
                    <th><%= query.dataValues.adj_score %></th>
                </tr>
                <tr>
                    <td></td>
                    <%- getCardDisplay(1, 2) %>
                    <%- getCardDisplay(2, 2) %>
                    <%- getCardDisplay(3, 2) %>
                    <td></td>
                    <th>Creatures</th>
                </tr>
                <tr>
                    <td></td>
                    <%- getCardDisplay(1, 3) %>
                    <%- getCardDisplay(2, 3) %>
                    <%- getCardDisplay(3, 3) %>
                    <td></td>
                    <th><%= query.dataValues.Pods[1].dataValues.pod_creatures + query.dataValues.Pods[2].dataValues.pod_creatures + query.dataValues.Pods[3].dataValues.pod_creatures %></th>
                </tr>
                <tr>
                    <td></td>
                    <%- getCardDisplay(1, 4) %>
                    <%- getCardDisplay(2, 4) %>
                    <%- getCardDisplay(3, 4) %>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <td></td>
                    <%- getCardDisplay(1, 5) %>
                    <%- getCardDisplay(2, 5) %>
                    <%- getCardDisplay(3, 5) %>
                    <td></td>
                    <th>Actions</th>
                </tr>
                <tr>
                    <td></td>
                    <%- getCardDisplay(1, 6) %>
                    <%- getCardDisplay(2, 6) %>
                    <%- getCardDisplay(3, 6) %>
                    <td></td>
                    <th><%= query.dataValues.Pods[1].dataValues.pod_actions + query.dataValues.Pods[2].dataValues.pod_actions + query.dataValues.Pods[3].dataValues.pod_actions %></th>
                </tr>
                <tr>
                    <td></td>
                    <%- getCardDisplay(1, 7) %>
                    <%- getCardDisplay(2, 7) %>
                    <%- getCardDisplay(3, 7) %>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <td></td>
                    <%- getCardDisplay(1, 8) %>
                    <%- getCardDisplay(2, 8) %>
                    <%- getCardDisplay(3, 8) %>
                    <td></td>
                    <th>Artifacts</th>
                </tr>
                <tr>
                    <td></td>
                    <%- getCardDisplay(1, 9) %>
                    <%- getCardDisplay(2, 9) %>
                    <%- getCardDisplay(3, 9) %>
                    <td></td>
                    <th><%= query.dataValues.Pods[1].dataValues.pod_artifacts + query.dataValues.Pods[2].dataValues.pod_artifacts + query.dataValues.Pods[3].dataValues.pod_artifacts %></th>
                </tr>
                <tr>
                    <td></td>
                    <%- getCardDisplay(1, 10) %>
                    <%- getCardDisplay(2, 10) %>
                    <%- getCardDisplay(3, 10) %>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <td></td>
                    <%- getCardDisplay(1, 11) %>
                    <%- getCardDisplay(2, 11) %>
                    <%- getCardDisplay(3, 11) %>
                    <td></td>
                    <th>Upgrades</th>
                </tr>
                <tr>
                    <td></td>
                    <%- getCardDisplay(1, 12) %>
                    <%- getCardDisplay(2, 12) %>
                    <%- getCardDisplay(3, 12) %>
                    <td></td>
                    <th><%= query.dataValues.Pods[1].dataValues.pod_upgrades + query.dataValues.Pods[2].dataValues.pod_upgrades + query.dataValues.Pods[3].dataValues.pod_upgrades %></th>
                </tr>

                <tr>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                </tr>
                <tr>
                    <th>Values</th>
                    <th><%= query.dataValues.house_1.house_name %> score</th>
                    <th><%= query.dataValues.house_2.house_name %> score</th>
                    <th><%= query.dataValues.house_3.house_name %> score</th>
                    <th>Meta Score</th>
                    <th>Totals</th>
                    <th></th>
                </tr>
                <tr>
                    <th>Score</th>
                    <th><%= query.dataValues.Pods[1].dataValues.pod_score %></th>
                    <th><%= query.dataValues.Pods[2].dataValues.pod_score %></th>
                    <th><%= query.dataValues.Pods[3].dataValues.pod_score %></th>
                    <th><%= query.dataValues.Pods[0].dataValues.pod_score || '' %></th>
                    <td></td>
                    <th style="text-align:left">Score</th>
                </tr>
                <tr>
                    <th>E</th>
                    <th><%= query.dataValues.Pods[1].dataValues.pod_e %></th>
                    <th><%= query.dataValues.Pods[2].dataValues.pod_e %></th>
                    <th><%= query.dataValues.Pods[3].dataValues.pod_e %></th>
                    <th><%= parseInt(query.dataValues.Pods[0].dataValues.pod_e) || '' %></th>
                    <th><%= parseInt(query.dataValues.total_e) %></th>
                    <th style="text-align:left">E</th>
                </tr>
                <tr>
                    <th>A</th>
                    <th><%= query.dataValues.Pods[1].dataValues.pod_a %></th>
                    <th><%= query.dataValues.Pods[2].dataValues.pod_a %></th>
                    <th><%= query.dataValues.Pods[3].dataValues.pod_a %></th>
                    <th><%= parseInt(query.dataValues.Pods[0].dataValues.pod_a) || '' %></th>
                    <th><%= parseInt(query.dataValues.total_a) %></th>
                    <th style="text-align:left">A</th>
                </tr>
                <tr>
                    <th>C</th>
                    <th><%= query.dataValues.Pods[1].dataValues.pod_c %></th>
                    <th><%= query.dataValues.Pods[2].dataValues.pod_c %></th>
                    <th><%= query.dataValues.Pods[3].dataValues.pod_c %></th>
                    <th><%= parseInt(query.dataValues.Pods[0].dataValues.pod_c) || '' %></th>
                    <th><%= parseInt(query.dataValues.total_c) %></th>
                    <th style="text-align:left">C</th>
                </tr>
                <tr>
                    <th>F</th>
                    <th><%= query.dataValues.Pods[1].dataValues.pod_f %></th>
                    <th><%= query.dataValues.Pods[2].dataValues.pod_f %></th>
                    <th><%= query.dataValues.Pods[3].dataValues.pod_f %></th>
                    <th><%= query.dataValues.Pods[0].dataValues.pod_f %></th>
                    <th><%= parseInt(query.dataValues.total_f) %></th>
                    <th style="text-align:left">F</th>
                </tr>
                <tr>
                    <th>D</th>
                    <th><%= query.dataValues.Pods[1].dataValues.pod_d %></th>
                    <th><%= query.dataValues.Pods[2].dataValues.pod_d %></th>
                    <th><%= query.dataValues.Pods[3].dataValues.pod_d %></th>
                    <th><%= query.dataValues.Pods[0].dataValues.pod_d %></th>
                    <th><%= parseInt(query.dataValues.total_d) %></th>
                    <th style="text-align:left">D</th>
                </tr>
                <tr>
                    <th>R</th>
                    <th><%= query.dataValues.Pods[1].dataValues.pod_r %></th>
                    <th><%= query.dataValues.Pods[2].dataValues.pod_r %></th>
                    <th><%= query.dataValues.Pods[3].dataValues.pod_r %></th>
                    <th><%= query.dataValues.Pods[0].dataValues.pod_r %></th>
                    <th><%= parseInt(query.dataValues.total_r) %></th>
                    <th style="text-align:left">R</th>
                </tr>
                <tr>
                    <th>BoB</th>
                    <th><%= query.dataValues.Pods[1].dataValues.pod_bob %></th>
                    <th><%= query.dataValues.Pods[2].dataValues.pod_bob %></th>
                    <th><%= query.dataValues.Pods[3].dataValues.pod_bob %></th>
                    <th><%= parseInt(query.dataValues.Pods[0].dataValues.pod_bob) || '' %></th>
                    <th><%= parseInt(query.dataValues.total_bob) %></th>
                    <th style="text-align:left">BoB</th>
                </tr>
                <tr>
                    <th>Scaling A</th>
                    <th><%= query.dataValues.Pods[1].dataValues.pod_scaling_a %></th>
                    <th><%= query.dataValues.Pods[2].dataValues.pod_scaling_a %></th>
                    <th><%= query.dataValues.Pods[3].dataValues.pod_scaling_a %></th>
                    <th><%= query.dataValues.Pods[0].dataValues.pod_scaling_a %></th>
                    <th><%= parseInt(query.dataValues.total_scaling_a) %></th>
                    <th style="text-align:left">Scaling A</th>
                </tr>
                <tr>
                    <th>Wipes</th>
                    <th><%= query.dataValues.Pods[1].dataValues.pod_wipes %></th>
                    <th><%= query.dataValues.Pods[2].dataValues.pod_wipes %></th>
                    <th><%= query.dataValues.Pods[3].dataValues.pod_wipes %></th>
                    <th><%= query.dataValues.Pods[0].dataValues.pod_wipes %></th>
                    <th><%= parseInt(query.dataValues.total_wipes) %></th>
                    <th style="text-align:left">Wipes</td>
                </tr>
                <tr>
                    <th>Cheats</th>
                    <th><%= query.dataValues.Pods[1].dataValues.pod_cheats %></th>
                    <th><%= query.dataValues.Pods[2].dataValues.pod_cheats %></th>
                    <th><%= query.dataValues.Pods[3].dataValues.pod_cheats %></th>
                    <th><%= query.dataValues.Pods[0].dataValues.pod_cheats %></th>
                    <th><%= parseInt(query.dataValues.total_cheats) %></th>
                    <th style="text-align:left">Cheats</td>
                </tr>
                <% if (query.Token) { %>
                    <% // Only show the tokens row if a deck has token creators %>
                    <tr>
                        <th>Tokens</th>
                        <th><%= query.dataValues.Pods[1].dataValues.pod_tokens %></th>
                        <th><%= query.dataValues.Pods[2].dataValues.pod_tokens %></th>
                        <th><%= query.dataValues.Pods[3].dataValues.pod_tokens %></th>
                        <th><%= query.dataValues.Pods[0].dataValues.pod_tokens %></th>
                        <th><%= parseInt(query.dataValues.Pods[1].dataValues.pod_tokens || 0) + parseInt(query.dataValues.Pods[2].dataValues.pod_tokens || 0) + parseInt(query.dataValues.Pods[3].dataValues.pod_tokens || 0) + parseInt(query.dataValues.Pods[0].dataValues.pod_tokens || 0) %></th>
                        <th style="text-align:left">Tokens</th>
                    </tr>
                <% } %>
            </table>
        
            <% // Parse attributes %>
            <% var attributes = JSON.parse(query.dataValues.attributes) %>

            <% if (attributes) { %>
                <h3>Meta Score Adjustments</h3>
                <% for (var key in attributes) { %>
                    <h5><%= key %> score: <%= attributes[key] %></h5>
                <% } %>
            <% } %>
        </div>
    </div>



    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <script src="/js/bootstrap.bundle.min.js"></script>

    <script type="text/javascript">
        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
        const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
    </script>
</body>
</html>


